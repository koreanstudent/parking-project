plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' // Querydsl(1)

    id "org.asciidoctor.convert" version "1.5.8"  // REST Docs API (1)
   /* id 'com.epages.restdocs-api-spec' version '0.12.0'*/ // restdocs-api-spec (1)
}

group = 'com.kr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

// REST Docs API (2)
ext {
    snippetsDir = file('build/generated-snippets')          // (2) 스니펫(snippet) : 문서 조각으로 생각하면 됩니다
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
// querydsl 사용하면 실행 시 에러나면 아래 설정
//File | Settings | Build, Execution, Deployment | Build Tools | Gradle 설정에서
//Build and run using: IntelliJ IDEA 설정
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    runtimeOnly "com.h2database:h2:1.4.197"

    implementation('com.querydsl:querydsl-jpa') // Querydsl(2)

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // 쿼리 파라미터를 로그로 남기는 외부 라이브러리는 시스템 자원을 사용하므로, 개발 단계에서는
    //편하게 사용해도 된다. 하지만 운영시스템에 적용하려면 꼭 성능테스트를 하고 사용하는 것이 좋다.
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // 시큐리티 적용으로 인해 인증되지 않은 사용자의 요청을 이동시키기 위함입니다. 따라서 임의로 인증된 사용자를 추가하여 API를 테스트
    testImplementation 'org.springframework.security:spring-security-test'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor' // REST Docs API (3)
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc') // REST Docs API (4)

  /*  testImplementation('com.epages:restdocs-api-spec-mockmvc:0.12.0')*/ // restdocs-api-spec (2)
}

test {
    outputs.dir snippetsDir // // REST Docs API (5)
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir  // REST Docs API (6)
    dependsOn test          // // REST Docs API (7) gradle build 시 test → asciidoctor 순으로 수행됩니다.
}

// REST Docs API (8)
task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

/*openapi3 {
    server = 'http://localhost:8099'
    title = 'User API'
    description = 'User Api Description'
    // tagDescriptionsPropertiesFile = 'src/docs/tag-descriptions.yaml'
    version = '0.1.0'
    format = 'yaml'
    copy {
        from "build/api-spec"
        into "src/main/resources/static/docs/"
    }
}*/

// querydsl task
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}